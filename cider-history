;; -*- coding: utf-8-unix -*-
;; Automatically written history of CIDER REPL session
;; Edit at your own risk

("(index-armor)" "(use 'gw2armor.core)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(query {\"name\" \"bandit\" \"weight\" \"\"})" "(or nil \"\")" "(or \"\" nil)" "(start-server)" "(stop-server)" "(query {\"name\" \"bandit\" \"weight\" nil})" "(query {\"name\" \"bandit\"})" "(use 'gw2armor.solr)" "(start-server)" "(stop-server)" "(let [m {\"foo\" nil, \"bar\" 1, \"baz\" \"banana\"}]
        (select-keys m (for [[k v] m :when (not (nil? v))] k)))" "\"
\"" "(let [m {\"foo\" nil \"bar\" 1 \"baz \"banana\"}]
)

)
])
]
}\"
               )
            ]
        )" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(drop-down \"slot\" [\"\" \"Leggings\" \"Boots\" \"Coat\" \"Gloves\" \"Shoulders\" \"Helm\"])" "(use 'hiccup.form)" "(-build-dropdowns)" "(home)" "(use 'gw2armor.routes.home)" "(start-server)" "(use 'gw2armor.repl)" "(start-server)" "(stop-server)" "(drop-down \"slot\" [\"\" \"Leggings\" \"Boots\" \"Coat\" \"Gloves\" \"Shoulders\" \"Helm\"])" "(first (drop-down \"slot\" [\"\" \"Leggings\" \"Boots\" \"Coat\" \"Gloves\" \"Shoulders\" \"Helm\"]))" "(drop-down \"slot\" [\"\" \"Leggings\" \"Boots\" \"Coat\" \"Gloves\" \"Shoulders\" \"Helm\"])" "(use 'hiccup.form)" "(drop-down \"slot\" [\"\" \"Leggings\" \"Boots\" \"Coat\" \"Gloves\" \"Shoulders\" \"Helm\"])" "(start-server)" "(stop-server)" "(foo {\"foo\" \"bar\"})" "(\"foo\" {\"foo\" \"bar\"})" "((keyword \"foo\") {\"foo\" \"bar\"})" "(:foo {\"foo\" \"bar\"})" "{\"foo\" \"bar\"}" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(home)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(concat [1 2] [3 4] [5 6])" "(second (rest (into [:span] (-build-dropdowns))))" "(rest (into [:span] (-build-dropdowns)))" "(second
       (into [:span] (-build-dropdowns)))" "(first
       (into [:span] (-build-dropdowns)))" "(:span (into [:span] (-build-dropdowns)))" "(start-server)" "(stop-server)" "(into [:span] (-build-dropdowns))" "[:span (-build-dropdowns)]" "(first (-build-dropdowns))" "(-build-dropdowns)" "(use 'gw2armor.routes.home)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(use 'gw2armor.repl)" "(start-server)" "(use 'gw2armor.repl)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(use 'gw2armor.repl)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(form \"/search\" \"Search\" (-build-dropdowns))" "(-build-dropdowns)" "(home)" "(use 'gw2armor.routes.home)" "(form \"/submit\" \"Submit\" [:p (text-field \"name\" \"Foobar\")])" "(form \"/submit\" \"Submit\")" "(form \"/submit\" \"Submit\" [:p (text-area \"Eheye\")])" "(form \"/submit\" \"Submit\")" "(use 'gw2armor.views.layout)" "(start-server)" "(use 'gw2armor.repl)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(use 'gw2armor.repl)" "(stop-server)" ")))))))))" ")" "(-build-dropdowns)" "(ns gw2armor.routes.home)" "(clojure.string/capitalize \"hey\")" "(clojure.string/title-case \"hey\")" "(clojure.string/upper-case \"hey\")" "(clojure.string/upper-case)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(use 'gw2armor.repl)" "(start-server)" "(stop-server)" "(start-server)" "(use 'gw2armor.repl)" "(home)" "(ns gw2armor.home)" "(home)" "(-build-dropdowns)" "(build-dropdowns)" "(html5 (form-to [:post \"/\"] 
                               (vals (reduce-kv (fn [m k v] (assoc m k (drop-down (name k) v))) {} dropdowns))))" "(html5 (vals (reduce-kv (fn [m k v] (assoc m k (drop-down (name k) v))) {} dropdowns)))" "(vals (reduce-kv (fn [m k v] (assoc m k (drop-down (name k) v))) {} dropdowns))" "(reduce-kv (fn [m k v] (assoc m k (drop-down (name k) v))) {} dropdowns)" "(reduce-kv (fn [m k v] (assoc m k (drop-down (name k) v))) {} dropdowns))" "(html5 (form-to [:post \"/\"] (reduce-kv (fn [m k v] (assoc m k (drop-down (name k) v))) {} dropdowns)))" "(form-to [:post \"/\"] (reduce-kv (fn [m k v] (assoc m k (drop-down (name k) v))) {} dropdowns))" "(reduce-kv (fn [m k v] (assoc m k (drop-down (name k) v))) {} dropdowns)" "(second (reduce-kv (fn [m k v] (assoc m k (drop-down (name k) v))) {} dropdowns))" "(first (reduce-kv (fn [m k v] (assoc m k (drop-down (name k) v))) {} dropdowns))" "(reduce-kv (fn [m k v] (assoc m k (drop-down (name k) v))) {} dropdowns)" "(reduce-kv (fn [m k v] (assoc m k (drop-down (name k) v))))" "(seq dropdowns)" "dropdowns" "(for [k (keys dropdowns) v (vals dropdowns)] (println (str \"Key: \" k \"\\tVal: \" v)))" "(for [k (keys dropdowns) v (vals dropdowns)] [k v])" "(for [k (keys dropdowns) v (vals dropdowns)] k v)" "(for [k (keys dropdowns) v (vals dropdowns)] k)" "(for [k (keys dropdowns) v (vals dropdowns)] (println k v))" "(keys (seq dropdowns))" "(seq dropdowns)" "(drop-down \"weights\" [\"Light\" \"Medium\" \"Heavy\"])" "(drop-down \"weights\")" "(drop-down [\"light\" \"Light\"] \"Weights\")" "(drop-down [\"hey \"Hey\"] \"Weights\")

)

))
)
]
\"
                           )
                          ]" "(html5 (form-to [:post \"/\"]
                               (for [wt [\"light\" \"medium\" \"heavy\"]] (radio-button wt \"weight_class\" false))))" "(html5 (for [wt [\"light\" \"medium\" \"heavy\"]] (radio-button wt \"weight_class\" false)))" "(html5 (form-to (for [wt [\"light\" \"medium\" \"heavy\"]] (radio-button wt \"weight_class\" false))))" "(html5 (for [wt [\"light\" \"medium\" \"heavy\"]] (radio-button wt \"weight_class\" false)))" "(for [wt [\"light\" \"medium\" \"heavy\"]] (radio-button wt \"weight_class\" false))" "(for [wt [\"light\" \"medium\" \"heavy\"]] (radio-button wt \"weight_class\"))" "(for [wt [\"light\" \"medium\" \"heavy\"]] (radio-button [(keyword wt) wt] \"weight_class\"))" "(form-to (for [wt [\"light\" \"medium\" \"heavy\"]] (radio-button [(keyword wt) wt] \"weight_class\")))" "(form-to (for [wt [\"light\" \"medium\" \"heavy\"]] (radio-button {(keyword wt) wt} \"weight_class\")))" "(with-group \"weight_class\" (for [wt [\"light\" \"medium\" \"heavy\"]] (radio-button {(keyword wt) wt} \"weight_class\")))" "(with-group \"weight_class\" (for [wt [\"light\" \"medium\" \"heavy\"]] (radio-button {(keyword wt) wt})))" "(for [wt [\"light\" \"medium\" \"heavy\"]] (radio-button {(keyword wt) wt} \"weight_class\"))" "(radio-button {\"light\" \"Light\" \"medium\" \"Medium\" \"heavy\" \"Heavy\"} \"banana\")" "(radio-button {\"weight\" [\"l\" \"m\" \"h\"]} \"banana\")" "(radio-button {\"weight\" [\"l\" \"m\" \"h\"]})" "(use 'hiccup)" "(require hiccup)" "(common)" "(ns gw2armor.core)" "(require hiccup)" "(query {\"weight_class\" \"light\"})" "ps" "(clojure.string/join \" AND \" (for [kv ps] (clojure.string/join \":\" kv)))" "kv" "(clojure.string/join \" AND \" (for [kv ps] (clojure.string/join \":\" kv)))" "(clojure.string/join \"AND\" (for [kv ps] (clojure.string/join \":\" kv)))" "(clojure.string/join \"&\" (for [kv ps] (clojure.string/join \":\" kv)))" "(for [kv ps] (clojure.string/join \":\" kv))" "(do [kv ps] (clojure.string/join \":\" kv))" "(doseq [kv ps] (clojure.string/join \":\" kv))" "(doseq [kv ps] (clojure.string/join \":\" kv)))" "(doseq [kv ps] (prn (clojure.string/join \":\" kv)))" "(def ps {\"foo\" 1 \"bar\" 2 \"baz\" 3})" "(doseq [kv ps] (prn (clojure.string/join \":\" kv)))" "(name \"foo\")" "(name :foo)" "(str :foo)" "(string :foo)" "(doseq [kv ps] (prn (clojure.string/join \":\"
                                                        kv)))" "(doseq [kv ps] (prn kv))" "(def ps {:foo 1 :bar 2 :baz 3})" "(index-armor)" "(add-docs! (last (cluster-docs files)))" "(count (cluster-docs files))" "(index-armor)" "(add-docs! (first (cluster-docs files)))" "(first (cluster-docs files))" "(take 1 (cluster-docs files))" "(index-armor)" "(ns gw2armor.core)" "(type -files)" "(take 1 clusters)" "(def clusters (cluster-docs -files))" "(vec (take 1 docs))" "(def docs (partition 100 fs))" "(encode (vec (take 10 fs)))" "(vec (take 10 fs))" "(take 1 fs)" "(def fs (read-json -files))" "(ns gw2armor.transform)" "(def fs (read-json -files))" "(count fs)" "(count items)" "(map #(-> % map-collapse cast-fields) (take 100 fs))" "(map #(-> % map-collapse cast-fields) (take 10 fs))" "(map #(-> % map-collapse) (take 10 fs))" "(take 10 fs)" "(take 1 fs)" "(def fs (read-json -files))" "(take 1 fs)" "(def fs (read-json -files))" "(read-json -files)" "(type (map #(-> % slurp (decode true)) -files))" "(type errors)" "(def errors (filter #(contains? % :error) (map #(-> % slurp (decode true)) -files)))" "(type errors)" "(def errors (filter #(contains? % :error) (lazy-seq (map #(-> % slurp (decode true)) -files))))" "(take 2 errors)" "(take 1 errors)" "(def errors (filter #(contains? % :error) (lazy-seq (map #(-> % slurp (decode true)) -files))))" "(count errors)" "(def errors (filter #(contains? % :error) (map #(-> % slurp (decode true)) -files)))" "(filter #(contains? % :error) (map #(-> % slurp (decode true)) (take 10 -files)))" "(filter #(contains? % :error)) (map #(-> % slurp (decode true)) (take 10 -files)))" "(filter #(not (contains? % :type)) (map #(-> % slurp (decode true)) (take 10 -files)))" "(filter #(contains? % :type) (map #(-> % slurp (decode true)) (take 10 -files)))" "(map #(-> % slurp (decode true) map-collapse cast-fields) (take 10 -files))" "(map #(-> % slurp (decode true)) (take 10 -files))" "(take 10 -files)" "(read-json -files)" "(def docs (read-json -files))" "(ns gw2armor.transform)" "(generate-string
       )" "(use 'cheshire.core)" "(read-courses)" "(read-course 1)" "(update-course 1 {:description \"Hey there\"})" "(read-course 1)" "(ns courses.models.course)" "(flatten (vec (for [[k v] where-map] (vector (str k \" = ?\") v))))" "(vec (for [[k v] where-map] (vector (str k \" = ?\") v)))" "(vec (for [[k v] where-map] (vec (str k \" = ?\") v)))" "(vec (for [[k v] where-map] (vector (str k \" = ?\") v)))" "(vec (for [[k v] where-map] (str k \" = ?\") v))" "(vec (for [[k v] where-map] (str k \" = ?\")))" "(for [[k v] where-map] (str k \" = ?\"))" "(for [[k v] where-map] (str k \" = ?\")))" "(for [[k v] where-map] (str k \" = ?\") v))" "(for [[k v] where-map] (str k \" = ?\") v)" "(for [[k v] where-map] (vector (str k \" = ?\") v))" "(vector (flatten (for [[k v] where-map] (vector (str k \" = ?\") v))))" "(flatten (for [[k v] where-map] (vector (str k \" = ?\") v)))" "(for [[k v] where-map] (vector (str k \" = ?\") v))" "(for [[k v] where-map] (vector (str k \" = ?\")))" "(for [[k v] where-map] (map vector (str k \" = ?\")))" "(for [[k v] where-map] (str k \" = ?\"))" "(map vector (for [[k v] where-map] (str k \" = ?\")))" "(vector (for [[k v] where-map] (str k \" = ?\")))" "(for [[k v] where-map] (str k \" = ?\"))" "foo" "(def foo (doseq [kv (seq where-map)]
                 (str (key kv) \" = ?\" (val kv))))" "(doseq [kv (seq where-map)]
        (str (key kv) \" = ?\" (val kv)))" "(doseq [kv (seq where-map)]
        (prn (str (key kv) \" = ?\" (val kv))))" "(doseq [kv (seq where-map)]
        (str (key kv) \" = ?\" (val kv)))" "(doseq [kv (seq where-map)] (prn (key kv)))" "(doseq [kv (seq where-map)] (key kv))" "(doseq [kv (seq where-map)] (prn kv))" "(seq where-map)" "(def where-map {\"id\" 1, \"subject\" \"foo\"})" "(def where-map {\"id\" 1, \"subject\" \"foo})


)
\"
                      )
        )" "(get-course 1)" "(ns courses.models.course)" "(get-course 1)" "(get)" "get" "(.get Resource 1)" "(.get Resource)" "get" "(use 'courses.models.db)" "(type Resource)" "(.get Course 1)" "(.get Course)" "(type Course)" "(ns courses.models.course)" "(type Resource)" "Resource" "(Resource)" "(.get Course 1)" "(new Course \"foo\" \"bar\" \"Hey\" \"blah\" \"now\" \"now\")" "(.get (new Course \"foo\" \"bar\" \"Hey\" \"blah\" \"now\" \"now\") \"1\")" "(.get (new Course \"foo\" \"bar\" \"Hey\" \"blah\" \"now\" \"now\") 1)" "(new Course \"foo\" \"bar\" \"Hey\" \"blah\" \"now\" \"now\")" "(new Course)" "(.get Course 1)" "(.get Course)" "Course" "(Course)" "(type Course)" "Course" "(ns courses.models.course)" "(use 'korma.db)" "exit" "(use 'korma.db)" "(ns courses.models.db)" "(use 'korma.db)" "(noir.validation/*errors*)" "noir.validation" "*err*" "(use 'eventcapture.handler)" "*errors*" "(use 'eventcapture.handler)" "*errors*" "(use 'eventcapture.handler)" "clojure.data" "(clojure.data)" "(clojure.data/json)" "(handle-event-post \"foo\" 100 1 \"{\\\"hey\\\": \\\"dude\\\"}\")" "(ns eventcapture.handler)" "(handle-event-post \"foo\" 100 1 \"{\\\"hey\\\": \\\"dude\\\"}\")" "(response \"foo\")" "(-> (response \"foo\") (status 500))" "(wrap-head (fn [request] (-> (response \"foo\") (status 500))))" "(server-error nil)" "(server-error)" "(ns eventcapture.handler)" "(not-nil? \"\")" "(start-server)" "(use 'liberator-service.repl)" "(do (stop-server) (start-server))" "(start-server)" "(use 'liberator-service.repl)" "(start-server)" "(view-graph (keys g) g)" "g" "(def g
    {:a [:b :c]
     :b [:c]
     :c [:a]})" "(use 'rhizome.viz)" "(use 'rhizome)" "(start-server)" "(use 'guestbook.repl)" "(start-server)" "(use 'guestbook.repl)" "(start-server)" "(println \"\")" "(use 'guestbook.repl)" "(println \"\")" "(start-server)" "(use 'guestbook.repl)" "(start-server)" "(use 'guestbook.repl)" "(start-server)" "(use 'guestbook.repl)" "(start-server)" "(use 'guestbook.repl)" "(start-server)" "(use 'guestbook.repl)" "(start-server)" "(use 'guestbook.repl)" "(start-server)" "(use 'guestbook.repl)" "(start-server)" "(use 'guestbook.repl)" "(if nil error nil)" "(if \"\" error nil)" "(if \"You dun goofed\" error nil)" "(if \"You dun goofed\" error)" "(def error {:label \"Login error: \" :message \"You dun goofed\"})" "(form \"/login\" \"Login\" nil [password-field :p \"password\"])" "(form \"/login\" \"Login\" [password-field :p \"password\"])" "(form \"/login\" \"Login\" {:label \"Login error: \" :message \"Username is required\"} [password-field :p \"password\"])" "(use 'guestbook.views.layout)" "(use 'hiccup.form)" "(start-server)" "(use 'guestbook.repl)" "(if nil 1)" "(if error (:label error))" "(str (:label error) (:message error))" "(:label error) (:label error)" "(:label error)" "(def error {:label \"Login error: \" :message \"You dun goofed\"})" "(-> {:label \"Login error: \" :message \"You dun goofed\"} :label)" "(-> {:label \"Login error: \" :message \"You dun goofed\"} :label :message)" "(form \"/hey\" \"Whoa\" [password-field :p \"password\"])" "(form \"/hey\" nil [password-field :p \"password\"])" "(use 'hiccup.form)" "(form \"/hey\" nil)" "(form \"/hey\")" "(use 'guestbook.views.layout)" "(start-server)" "(stop-server)" "(foo 1 3 4)")